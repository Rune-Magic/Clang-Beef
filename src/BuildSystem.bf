/* Auto generated by https://github.com/Rune-Magic/C2Beef-Binding-Generator
 * DO NOT EDIT
 */

using System;
using System.Interop;

namespace LibClang;

extension Clang
{
	/** Return the timestamp for use with Clang's
	 *  @c -fbuild-session-timestamp= option. 
	 */
	[Import(Clang.dll), LinkName("clang_getBuildSessionTimestamp")] public static extern c_ulonglong GetBuildSessionTimestamp();
}

/** Object encapsulating information about overlaying virtual
 *  file/directories over the real file system.
 */
class CXVirtualFileOverlay { private this() {} }

extension Clang
{
	/** Create a @c CXVirtualFileOverlay object. Must be disposed with @c clang_VirtualFileOverlay_dispose(). 
	 *   
	 *  @param options is reserved, always pass 0.
	 */
	[Import(Clang.dll), LinkName("clang_VirtualFileOverlay_create")] public static extern CXVirtualFileOverlay VirtualFileOverlay_Create(c_uint options);

	/** Map an absolute virtual file path to an absolute real one.
	 *  The virtual path must be canonicalized (not contain "."/"..").
	 *  
	 *  @returns 0 for success, non-zero to indicate an error.
	 */
	[Import(Clang.dll), LinkName("clang_VirtualFileOverlay_addFileMapping")] public static extern CXErrorCode VirtualFileOverlay_AddFileMapping(CXVirtualFileOverlay, c_char* virtualPath, c_char* realPath);

	/** Set the case sensitivity for the @c CXVirtualFileOverlay object. The @c CXVirtualFileOverlay object is case-sensitive by default, this option can be used to override the default.
	 *  
	 *  @returns 0 for success, non-zero to indicate an error.
	 */
	[Import(Clang.dll), LinkName("clang_VirtualFileOverlay_setCaseSensitivity")] public static extern CXErrorCode VirtualFileOverlay_SetCaseSensitivity(CXVirtualFileOverlay, c_int caseSensitive);

	/** Write out the @c CXVirtualFileOverlay object to a char buffer. 
	 *  
	 *  @param options is reserved, always pass 0.
	 *  
	 *  @param out_buffer_ptr pointer to receive the buffer pointer, which should be
	 *  disposed using @c clang_free().  
	 *  @param out_buffer_size pointer to receive the buffer size.
	 *  
	 *  @returns 0 for success, non-zero to indicate an error.
	 */
	[Import(Clang.dll), LinkName("clang_VirtualFileOverlay_writeToBuffer")] public static extern CXErrorCode VirtualFileOverlay_WriteToBuffer(CXVirtualFileOverlay, c_uint options, c_char** out_buffer_ptr, c_uint* out_buffer_size);

	/** free memory allocated by libclang, such as the buffer returned by
	 *  @c CXVirtualFileOverlay() or  @c clang_ModuleMapDescriptor_writeToBuffer(). 
	 *   
	 *  @param buffer memory pointer to free.
	 */
	[Import(Clang.dll), LinkName("clang_free")] public static extern void Free(void* buffer);

	/** Dispose a @c CXVirtualFileOverlay object. 
	 */
	[Import(Clang.dll), LinkName("clang_VirtualFileOverlay_dispose")] public static extern void VirtualFileOverlay_Dispose(CXVirtualFileOverlay);
}

/** Object encapsulating information about a module.modulemap file.
 */
class CXModuleMapDescriptor { private this() {} }

extension Clang
{
	/** Create a @c CXModuleMapDescriptor object. Must be disposed with @c clang_ModuleMapDescriptor_dispose(). 
	 *   
	 *  @param options is reserved, always pass 0.
	 */
	[Import(Clang.dll), LinkName("clang_ModuleMapDescriptor_create")] public static extern CXModuleMapDescriptor ModuleMapDescriptor_Create(c_uint options);

	/** Sets the framework module name that the module.modulemap describes.
	 *  
	 *  @returns 0 for success, non-zero to indicate an error.
	 */
	[Import(Clang.dll), LinkName("clang_ModuleMapDescriptor_setFrameworkModuleName")] public static extern CXErrorCode ModuleMapDescriptor_SetFrameworkModuleName(CXModuleMapDescriptor, c_char* name);

	/** Sets the umbrella header name that the module.modulemap describes.
	 *  
	 *  @returns 0 for success, non-zero to indicate an error.
	 */
	[Import(Clang.dll), LinkName("clang_ModuleMapDescriptor_setUmbrellaHeader")] public static extern CXErrorCode ModuleMapDescriptor_SetUmbrellaHeader(CXModuleMapDescriptor, c_char* name);

	/** Write out the @c CXModuleMapDescriptor object to a char buffer. 
	 *  
	 *  @param options is reserved, always pass 0.
	 *  
	 *  @param out_buffer_ptr pointer to receive the buffer pointer, which should be
	 *  disposed using @c clang_free().  
	 *  @param out_buffer_size pointer to receive the buffer size.
	 *  
	 *  @returns 0 for success, non-zero to indicate an error.
	 */
	[Import(Clang.dll), LinkName("clang_ModuleMapDescriptor_writeToBuffer")] public static extern CXErrorCode ModuleMapDescriptor_WriteToBuffer(CXModuleMapDescriptor, c_uint options, c_char** out_buffer_ptr, c_uint* out_buffer_size);

	/** Dispose a @c CXModuleMapDescriptor object. 
	 */
	[Import(Clang.dll), LinkName("clang_ModuleMapDescriptor_dispose")] public static extern void ModuleMapDescriptor_Dispose(CXModuleMapDescriptor);

}
